#!/usr/bin/env bash

set -e

# ACTIVATE_SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/env/bin/activate"
# if [ -f "$ACTIVATE_SCRIPT" ]
# then
# 	source $ACTIVATE_SCRIPT
# else
# 	echo "$ACTIVATE_SCRIPT not found.  Did you follow documentation to install dependencies?"
# 	exit 1
# fi

SKIP_TAGS="_null encrypted"
ADDITIONAL_PROMPT="[pasted values will not be displayed]"

additional_roles () {

read -p "
Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to cellular networks?
[y/N]: " -r OnDemandEnabled_Cellular
OnDemandEnabled_Cellular=${OnDemandEnabled_Cellular:-n}
if [[ "$OnDemandEnabled_Cellular" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" OnDemandEnabled_Cellular=Y"; fi

read -p "
Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to Wi-Fi?
[y/N]: " -r OnDemandEnabled_WIFI
OnDemandEnabled_WIFI=${OnDemandEnabled_WIFI:-n}
if [[ "$OnDemandEnabled_WIFI" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" OnDemandEnabled_WIFI=Y"; fi

if [[ "$OnDemandEnabled_WIFI" =~ ^(y|Y)$ ]]; then
  read -p "
List the names of trusted Wi-Fi networks (if any) that macOS/iOS clients exclude from using the VPN (e.g., your home network. Comma-separated value, e.g., HomeNet,OfficeWifi,AlgoWiFi)
: " -r OnDemandEnabled_WIFI_EXCLUDE
  OnDemandEnabled_WIFI_EXCLUDE=${OnDemandEnabled_WIFI_EXCLUDE:-_null}
  EXTRA_VARS+=" OnDemandEnabled_WIFI_EXCLUDE=\"$OnDemandEnabled_WIFI_EXCLUDE\""
fi

read -p "
Do you want to install a DNS resolver on this VPN server, to block ads while surfing?
[y/N]: " -r dns_enabled
dns_enabled=${dns_enabled:-n}
if [[ "$dns_enabled" =~ ^(y|Y)$ ]]; then ROLES+=" dns"; fi

read -p "
Do you want each user to have their own account for SSH tunneling?
[y/N]: " -r ssh_tunneling_enabled
ssh_tunneling_enabled=${ssh_tunneling_enabled:-n}
if [[ "$ssh_tunneling_enabled" =~ ^(y|Y)$ ]]; then ROLES+=" ssh_tunneling"; fi

read -p "
Do you want to apply operating system security enhancements on the server? (warning: replaces your sshd_config)
[y/N]: " -r security_enabled
security_enabled=${security_enabled:-n}
if [[ "$security_enabled" =~ ^(y|Y)$ ]]; then ROLES+=" security"; fi

read -p "
Do you want the VPN to support Windows 10 or Linux Desktop clients? (enables compatible ciphers and key exchange, less secure)
[y/N]: " -r Win10_Enabled
Win10_Enabled=${Win10_Enabled:-n}
if [[ "$Win10_Enabled" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" Win10_Enabled=Y"; fi

read -p "
Do you want to retain the CA key? (required to add users in the future, but less secure)
[y/N]: " -r Store_CAKEY
Store_CAKEY=${Store_CAKEY:-N}
if [[ "$Store_CAKEY" =~ ^(n|N)$ ]]; then EXTRA_VARS+=" Store_CAKEY=N"; fi

}

deploy () {
  echo ansible-playbook deploy.yml -t "${ROLES// /,}" -e "${EXTRA_VARS}" --skip-tags "${SKIP_TAGS// /,}"
  ansible-playbook deploy.yml -t "${ROLES// /,}" -e "${EXTRA_VARS}" --skip-tags "${SKIP_TAGS// /,}"
}

ec2 () {
  ROLES="ec2 vpn cloud"
  EXTRA_VARS="aws_access_key=$aws_access_key aws_secret_key=$aws_secret_key aws_server_name=$aws_server_name ssh_public_key=$ssh_public_key region=$region"
}

non_cloud () {
  read -p "
Enter the IP address of your server: (or use localhost for local installation)
[localhost]: " -r server_ip
  server_ip=${server_ip:-localhost}

  read -p "

What user should we use to login on the server? (note: passwordless login required, or ignore if you're deploying to localhost)
[root]: " -r server_user
  server_user=${server_user:-root}

if [ "x${server_ip}" = "xlocalhost" ]; then
	myip=""
else
	myip=${server_ip}
fi

  read -p "

Enter the public IP address of your server: (IMPORTANT! This IP is used to verify the certificate)
[$myip]: " -r IP_subject
  IP_subject=${IP_subject:-$myip}

if [ "x${IP_subject}" = "x" ]; then
	echo "no server IP given. exiting."
	exit 1
fi

  ROLES="local vpn"
  EXTRA_VARS="server_ip=$server_ip server_user=$server_user IP_subject_alt_name=$IP_subject"
  SKIP_TAGS+=" cloud update-alternatives"

  read -p "

Was this server deployed by Algo previously?
[y/N]: " -r Deployed_By_Algo
Deployed_By_Algo=${Deployed_By_Algo:-n}
if [[ "$Deployed_By_Algo" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" Deployed_By_Algo=Y"; fi

}

algo_provisioning () {
  echo -n "
  What provider would you like to use?
    2. Amazon EC2
    5. Install to existing Ubuntu 16.04 server

Enter the number of your desired provider
: "

  read -r N

  case "$N" in
    2) ec2; ;;
    5) non_cloud; ;;
    *) exit 1 ;;
  esac

  additional_roles
  deploy
}

# user_management () {

#   read -p "
# Enter the IP address of your server: (or use localhost for local installation)
# : " -r server_ip

#   read -p "
# What user should we use to login on the server? (note: passwordless login required, or ignore if you're deploying to localhost)
# [root]: " -r server_user
#   server_user=${server_user:-root}

# read -p "
# Do you want each user to have their own account for SSH tunneling?
# [y/N]: " -r ssh_tunneling_enabled
# ssh_tunneling_enabled=${ssh_tunneling_enabled:-n}

# if [ "x${server_ip}" = "xlocalhost" ]; then
# 	myip=""
# else
# 	myip=${server_ip}
# fi

# read -p "

# Enter the public IP address of your server: (IMPORTANT! This IP is used to verify the certificate)
# [$myip]: " -r IP_subject
# IP_subject=${IP_subject:-$myip}

# if [ "x${IP_subject}" = "x" ]; then
# echo "no server IP given. exiting."
# exit 1
# fi

#   read -p "
# Enter the password for the private CA key:
# $ADDITIONAL_PROMPT
# : " -rs easyrsa_CA_password

# ansible-playbook users.yml -e "server_ip=$server_ip server_user=$server_user ssh_tunneling_enabled=$ssh_tunneling_enabled IP_subject_alt_name=$IP_subject easyrsa_CA_password=$easyrsa_CA_password" -t update-users --skip-tags common
# }

case "$1" in
  # update-users) user_management ;;
  *) algo_provisioning ;;
esac
