- hosts: cloudformation
  gather_facts: false
  vars:
    vpnState: present
    securityState: "{{ vpnState }}"
    iamState: "{{ vpnState }}"

  tasks:
  - name: Create VPN security resources
    cloudformation: &vpnSecurityResources
      stack_name: "{{ infra.name }}-vpn-security"
      region: "{{ region }}"
      state: "{{ securityState }}"
      template_url: https://s3.amazonaws.com/{{ cfbucket }}/security/vpn.cf.yaml
    args:
      template_parameters:
        EnvironmentName: "{{ infra.name }}"
        VPC: "{{ infra.vpc }}"
        SystemSecurityGroup: "{{infra.systemSecurityGroup}}"
    when: securityState == "present"
    register: vpnSecurity

  - name: Create VPN IAM resources
    cloudformation: &vpnIAM
      stack_name: "{{ infra.name }}-vpn-IAM"
      region: "{{ region }}"
      state: "{{ iamState }}"
      template_url: https://s3.amazonaws.com/{{ cfbucket }}/iam/vpn.cf.yaml
    args:
      template_parameters:
        EnvironmentName: "{{ infra.name }}"
    when: iamState == "present"
    register: vpnIAM

  - name: Create VPN EC2 instance
    cloudformation: &vpnInstance
      stack_name: "{{ infra.name }}-vpn"
      region: "{{ region }}"
      state: "{{ vpnState }}"
      template_url: https://s3.amazonaws.com/{{ cfbucket }}/infrastructure/vpn.cf.yaml
    args:
      template_parameters:
        EnvironmentName: "{{ infra.name }}"
        VPC: "{{ infra.vpc }}"
        Subnet: "{{ infra.subnet }}"
        InstanceProfile: "{{ vpnIAM.stack_outputs.InstanceProfile }}"
        SystemSecurityGroup: "{{ infra.systemSecurityGroup }}"
        VPNSecurityGroup: "{{ vpnSecurity.stack_outputs.SecurityGroup }}"
        KeyName: "{{ keyName }}"
        InstanceType: "{{ vpn.instanceType }}"
        EBSVolumeSize: "{{ vpn.volumeSize }}"
